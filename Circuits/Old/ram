customasm v0.13.5 (x86_64-pc-windows-msvc)
assembling `asm\main.asm`...

    outp |  addr | data (base 16)

     0:0 |     0 | e6 01 81    ; jmp main
     3:0 |     3 |             ; trash_var:
     d:0 |     d |             ; isOne:
     d:0 |     d | 5f 10       ; imm c, -1
     f:0 |     f | c0 00 03 91 ; load b, [trash_var + 0]
    13:0 |    13 | 88          ; add b
    14:0 |    14 | e2 00 1e    ; jnz .notZero
    17:0 |    17 | 40 10       ; imm c, 0
    19:0 |    19 | c0 00 04 91 ; load b, [trash_var + 1]
    1d:0 |    1d | 88          ; add b
    1e:0 |    1e |             ; .notZero:
    1e:0 |    1e | aa          ; ret
    1f:0 |    1f |             ; isZero:
    1f:0 |    1f | 01          ; mov a, b
    20:0 |    20 | 60          ; imm b, 0
    21:0 |    21 | 88          ; add b
    22:0 |    22 | 08          ; mov b, a
    23:0 |    23 | e4 00 27    ; jz .zero
    26:0 |    26 | aa          ; ret
    27:0 |    27 |             ; .zero:
    27:0 |    27 | 1a          ; mov d, c
    28:0 |    28 | 40 10       ; imm c, 0
    2a:0 |    2a | 80          ; add A
    2b:0 |    2b | 13          ; mov c, d
    2c:0 |    2c | aa          ; ret
    2d:0 |    2d |             ; fibo:
    2d:0 |    2d | 07 c0 fa 3e 98 06 c0 fa 3f 98 e7 fb c5 ; push xy
    3a:0 |    3a | 07 c0 fa 3e 98 06 c0 fa 3f 98 e7 fb c5 ; push xy
    47:0 |    47 | c0 fa 4e 90 c0 fa 3e 98 c0 fa 4f 90 c0 fa 3f 98 e7 fa 52 ; getVar bc, [const_neg6]
    5a:0 |    5a | e7 00 1f    ; call isZero
    5d:0 |    5d | e2 00 66    ; jnz .notZero
    60:0 |    60 | 61          ; imm b, 1
    61:0 |    61 | 40 10       ; imm c, 0
    63:0 |    63 | e6 01 62    ; jmp .finish
    66:0 |    66 |             ; .notZero:
    66:0 |    66 | e7 00 0d    ; call isOne
    69:0 |    69 | e2 00 72    ; jnz .notOne
    6c:0 |    6c | 61          ; imm b, 1
    6d:0 |    6d | 40 10       ; imm c, 0
    6f:0 |    6f | e6 01 62    ; jmp .finish
    72:0 |    72 |             ; .notOne:
    72:0 |    72 | c0 fa 48 90 c0 fa 3e 98 c0 fa 49 90 c0 fa 3f 98 e7 fb 48 ; add16 bc, [const_neg1]
    85:0 |    85 | c0 00 03 90 c0 fa 3e 98 c0 00 04 90 c0 fa 3f 98 e7 fb c5 ; push [trash_var]
    98:0 |    98 | e7 00 2d    ; call fibo
    9b:0 |    9b | e7 fb 64 c0 fa 3e 90 38 c0 fa 3f 90 30 ; pop xy
    a8:0 |    a8 | c0 00 03 99 c0 00 04 9a ; mov [trash_var], bc
    b0:0 |    b0 | c0 fa 44 99 c0 fa 45 9a c0 fa 4a 90 c0 fa 40 98 c0 fa 4b 90 c0 fa 41 98 c0 00 03 91 c0 00 04 92 e7 fa 8b c0 fa 44 91 c0 fa 45 92 ; setVar [const_neg2], [trash_var]
    db:0 |    db | c0 fa 4e 90 c0 fa 3e 98 c0 fa 4f 90 c0 fa 3f 98 e7 fa 52 ; getVar bc, [const_neg6]
    ee:0 |    ee | c0 fa 4a 90 c0 fa 3e 98 c0 fa 4b 90 c0 fa 3f 98 e7 fb 48 ; add16 bc, [const_neg2]
   101:0 |   101 | c0 00 03 90 c0 fa 3e 98 c0 00 04 90 c0 fa 3f 98 e7 fb c5 ; push [trash_var]
   114:0 |   114 | e7 00 2d    ; call fibo
   117:0 |   117 | e7 fb 64 c0 fa 3e 90 38 c0 fa 3f 90 30 ; pop xy
   124:0 |   124 | c0 fa 44 99 c0 fa 45 9a c0 fa 4a 90 c0 fa 3e 98 c0 fa 4b 90 c0 fa 3f 98 e7 fa 52 c0 00 05 99 c0 00 06 9a c0 fa 44 91 c0 fa 45 92 ; getVar [trash_var + 2], [const_neg2]
   14f:0 |   14f | c0 00 05 90 c0 fa 3e 98 c0 00 06 90 c0 fa 3f 98 e7 fb 48 ; add16 bc, [trash_var + 2]
   162:0 |   162 |             ; .finish:
   162:0 |   162 | e7 fb 64 c0 fa 3e 90 38 c0 fa 3f 90 30 ; pop xy
   16f:0 |   16f | e7 fb 64 c0 fa 3e 90 38 c0 fa 3f 90 30 ; pop xy
   17c:0 |   17c | aa          ; ret
   17d:0 |   17d |             ; var1:
   17d:0 |   17d | 00 00       ; 0x0000
   17f:0 |   17f |             ; var2:
   17f:0 |   17f | 01 00       ; 0x0100
   181:0 |   181 |             ; main:
   181:0 |   181 | c0 01 7f 91 c0 01 80 92 ; mov bc, [var2]
   189:0 |   189 | e7 00 1f    ; call isZero
   18c:0 |   18c | e4 01 a2    ; jz .isZero
   18f:0 |   18f | c0 01 7f 90 c0 00 03 98 c0 01 80 90 c0 00 04 98 ; mov [trash_var], [var2]
   19f:0 |   19f | e6 01 b2    ; jmp .endIf
   1a2:0 |   1a2 |             ; .isZero:
   1a2:0 |   1a2 | c0 01 7d 90 c0 00 03 98 c0 01 7e 90 c0 00 04 98 ; mov [trash_var], [var1]
   1b2:0 |   1b2 |             ; .endIf:
   1b2:0 |   1b2 | c0 00 03    ; imm M, trash_var
   1b5:0 |   1b5 | ae          ; halt
  fa3e:0 |  fa3e |             ; systemFuncs:
  fa3e:0 |  fa3e |             ; system_trash_var:
  fa46:0 |  fa46 |             ; const_1:
  fa46:0 |  fa46 | 00 01       ; `16
  fa48:0 |  fa48 |             ; const_neg1:
  fa48:0 |  fa48 | ff ff       ; `16
  fa4a:0 |  fa4a |             ; const_neg2:
  fa4a:0 |  fa4a | ff fe       ; `16
  fa4c:0 |  fa4c |             ; const_neg4:
  fa4c:0 |  fa4c | ff fc       ; `16
  fa4e:0 |  fa4e |             ; const_neg6:
  fa4e:0 |  fa4e | ff fa       ; `16
  fa50:0 |  fa50 |             ; const_neg8:
  fa50:0 |  fa50 | ff f8       ; `16
  fa52:0 |  fa52 |             ; getVar:
  fa52:0 |  fa52 | 07 c0 fa 42 98 06 c0 fa 43 98 ; mov [system_trash_var + 4], xy
  fa5c:0 |  fa5c | c0 fb fe 90 c0 fa 40 98 c0 fb ff 90 c0 fa 41 98 ; mov [system_trash_var + 2], [stackPrt + 0]
  fa6c:0 |  fa6c | e7 fb 12    ; call add16BitFast
  fa6f:0 |  fa6f | c0 fa 3e 90 38 c0 fa 3f 90 30 ; mov xy, [system_trash_var + 0]
  fa79:0 |  fa79 | 26 2f       ; mov m, xy
  fa7b:0 |  fa7b | 91          ; load b
  fa7c:0 |  fa7c | b0          ; inc xy
  fa7d:0 |  fa7d | 26 2f       ; mov m, xy
  fa7f:0 |  fa7f | 92          ; load c
  fa80:0 |  fa80 | c0 fa 42 90 38 c0 fa 43 90 30 ; mov xy, [system_trash_var + 4]
  fa8a:0 |  fa8a | aa          ; ret
  fa8b:0 |  fa8b |             ; setVar:
  fa8b:0 |  fa8b | 07 c0 fa 42 98 06 c0 fa 43 98 ; mov [system_trash_var + 4], xy
  fa95:0 |  fa95 | c0 fb fe 90 c0 fa 3e 98 c0 fb ff 90 c0 fa 3f 98 ; mov [system_trash_var + 0], [stackPrt + 0]
  faa5:0 |  faa5 | e7 fb 12    ; call add16BitFast
  faa8:0 |  faa8 | c0 fa 3e 90 28 c0 fa 3f 90 20 ; mov m, [system_trash_var + 0]
  fab2:0 |  fab2 | a0          ; mov xy, m
  fab3:0 |  fab3 | 99          ; store b
  fab4:0 |  fab4 | b0          ; inc xy
  fab5:0 |  fab5 | 26 2f       ; mov m, xy
  fab7:0 |  fab7 | 9a          ; store c
  fab8:0 |  fab8 | c0 fa 42 90 38 c0 fa 43 90 30 ; mov xy, [system_trash_var + 4]
  fac2:0 |  fac2 | aa          ; ret
  fac3:0 |  fac3 |             ; add16Bit:
  fac3:0 |  fac3 | c0 fb 0f 99 ; store b, [.localStore + 0]
  fac7:0 |  fac7 | c0 fb 10 9a ; store c, [.localStore + 1]
  facb:0 |  facb | c0 fb 11 9b ; store d, [.localStore + 2]
  facf:0 |  facf | c0 fa 3f 91 ; load b, [system_trash_var + 1]
  fad3:0 |  fad3 | c0 fa 41 92 ; load c, [system_trash_var + 3]
  fad7:0 |  fad7 | 80          ; add a
  fad8:0 |  fad8 | 18          ; mov d, a
  fad9:0 |  fad9 | e8 fa e0    ; jc .carry
  fadc:0 |  fadc | 60          ; imm b, 0
  fadd:0 |  fadd | e6 fa e1    ; jmp .continue
  fae0:0 |  fae0 |             ; .carry:
  fae0:0 |  fae0 | 61          ; imm b, 1
  fae1:0 |  fae1 |             ; .continue:
  fae1:0 |  fae1 | c0 fa 3e 92 ; load c, [system_trash_var + 0]
  fae5:0 |  fae5 | 88          ; add b
  fae6:0 |  fae6 | e8 fa ed    ; jc .carry2
  fae9:0 |  fae9 | 40          ; imm a, 0
  faea:0 |  faea | e6 fa ee    ; jmp .continue2
  faed:0 |  faed |             ; .carry2:
  faed:0 |  faed | 41          ; imm a, 1
  faee:0 |  faee |             ; .continue2:
  faee:0 |  faee | c0 fa 40 92 ; load c, [system_trash_var + 2]
  faf2:0 |  faf2 | 88          ; add b
  faf3:0 |  faf3 | c0 fa 3f 9b ; store d, [system_trash_var + 1]
  faf7:0 |  faf7 | c0 fa 3e 99 ; store b, [system_trash_var + 0]
  fafb:0 |  fafb | c0 fb 0f 91 ; load b, [.localStore + 0]
  faff:0 |  faff | c0 fb 10 92 ; load c, [.localStore + 1]
  fb03:0 |  fb03 | c0 fb 11 93 ; load d, [.localStore + 2]
  fb07:0 |  fb07 | e8 fb 0d    ; jc .setCarry
  fb0a:0 |  fb0a | e6 fb 0e    ; jmp .return
  fb0d:0 |  fb0d |             ; .setCarry:
  fb0d:0 |  fb0d | 41          ; imm a, 1
  fb0e:0 |  fb0e |             ; .return:
  fb0e:0 |  fb0e | aa          ; ret
  fb0f:0 |  fb0f |             ; .localStore:
  fb12:0 |  fb12 |             ; add16BitFast:
  fb12:0 |  fb12 | c0 fb 46 99 ; store b, [.localStore + 0]
  fb16:0 |  fb16 | c0 fb 47 9a ; store c, [.localStore + 1]
  fb1a:0 |  fb1a | c0 fa 3f 91 ; load b, [system_trash_var + 1]
  fb1e:0 |  fb1e | c0 fa 41 92 ; load c, [system_trash_var + 3]
  fb22:0 |  fb22 | 80          ; add a
  fb23:0 |  fb23 | e8 fb 2a    ; jc .carry
  fb26:0 |  fb26 | 60          ; imm b, 0
  fb27:0 |  fb27 | e6 fb 2b    ; jmp .continue
  fb2a:0 |  fb2a |             ; .carry:
  fb2a:0 |  fb2a | 61          ; imm b, 1
  fb2b:0 |  fb2b |             ; .continue:
  fb2b:0 |  fb2b | c0 fa 3e 92 ; load c, [system_trash_var + 0]
  fb2f:0 |  fb2f | 88          ; add b
  fb30:0 |  fb30 | c0 fa 40 92 ; load c, [system_trash_var + 2]
  fb34:0 |  fb34 | 88          ; add b
  fb35:0 |  fb35 | c0 fa 3f 98 ; store a, [system_trash_var + 1]
  fb39:0 |  fb39 | c0 fa 3e 99 ; store b, [system_trash_var + 0]
  fb3d:0 |  fb3d | c0 fb 46 91 ; load b, [.localStore + 0]
  fb41:0 |  fb41 | c0 fb 47 92 ; load c, [.localStore + 1]
  fb45:0 |  fb45 | aa          ; ret
  fb46:0 |  fb46 |             ; .localStore:
  fb48:0 |  fb48 |             ; add16BitBc:
  fb48:0 |  fb48 | c0 fb 63 9b ; store d, [.localStore + 0]
  fb4c:0 |  fb4c | 19          ; mov d, b
  fb4d:0 |  fb4d | c0 fa 3f 91 ; load b, [system_trash_var + 1]
  fb51:0 |  fb51 | 80          ; add a
  fb52:0 |  fb52 | e8 fb 59    ; jc .carry
  fb55:0 |  fb55 | 60          ; imm b, 0
  fb56:0 |  fb56 | e6 fb 5a    ; jmp .continue
  fb59:0 |  fb59 |             ; .carry:
  fb59:0 |  fb59 | 61          ; imm b, 1
  fb5a:0 |  fb5a |             ; .continue:
  fb5a:0 |  fb5a | c0 fa 3e 92 ; load c, [system_trash_var + 0]
  fb5e:0 |  fb5e | 88          ; add b
  fb5f:0 |  fb5f | 13          ; mov c, d
  fb60:0 |  fb60 | 88          ; add b
  fb61:0 |  fb61 | 10          ; mov c, a
  fb62:0 |  fb62 | aa          ; ret
  fb63:0 |  fb63 |             ; .localStore:
  fb64:0 |  fb64 |             ; popFunc:
  fb64:0 |  fb64 | 07 c0 fa 42 98 06 c0 fa 43 98 ; mov [system_trash_var + 4], xy
  fb6e:0 |  fb6e | c0 fb fe 90 c0 fa 3e 98 c0 fb ff 90 c0 fa 3f 98 ; mov [system_trash_var + 0], [stackPrt]
  fb7e:0 |  fb7e | c0 fa 4a 90 c0 fa 40 98 c0 fa 4b 90 c0 fa 41 98 ; mov [system_trash_var + 2], [const_neg2]
  fb8e:0 |  fb8e | e7 fb 12    ; call add16BitFast
  fb91:0 |  fb91 | c0 fa 3e 90 c0 fb fe 98 c0 fa 3f 90 c0 fb ff 98 ; mov [stackPrt], [system_trash_var]
  fba1:0 |  fba1 | c0 fa 3e 90 38 c0 fa 3f 90 30 ; mov xy, [system_trash_var]
  fbab:0 |  fbab | 26 2f       ; mov m, xy
  fbad:0 |  fbad | 90          ; load a
  fbae:0 |  fbae | c0 fa 3e 98 ; store a, [system_trash_var + 0]
  fbb2:0 |  fbb2 | b0          ; inc xy
  fbb3:0 |  fbb3 | 26 2f       ; mov m, xy
  fbb5:0 |  fbb5 | 90          ; load a
  fbb6:0 |  fbb6 | c0 fa 3f 98 ; store a, [system_trash_var + 1]
  fbba:0 |  fbba | c0 fa 42 90 38 c0 fa 43 90 30 ; mov xy, [system_trash_var + 4]
  fbc4:0 |  fbc4 | aa          ; ret
  fbc5:0 |  fbc5 |             ; pushFunc:
  fbc5:0 |  fbc5 | 07 c0 fa 42 98 06 c0 fa 43 98 ; mov [system_trash_var + 4], xy
  fbcf:0 |  fbcf | c0 fb fe 90 38 c0 fb ff 90 30 ; mov xy, [stackPrt]
  fbd9:0 |  fbd9 | c0 fa 3e 90 ; load a, [system_trash_var + 0]
  fbdd:0 |  fbdd | 26 2f       ; mov m, xy
  fbdf:0 |  fbdf | 98          ; store a
  fbe0:0 |  fbe0 | b0          ; inc xy
  fbe1:0 |  fbe1 | c0 fa 3f 90 ; load a, [system_trash_var + 1]
  fbe5:0 |  fbe5 | 26 2f       ; mov m, xy
  fbe7:0 |  fbe7 | 98          ; store a
  fbe8:0 |  fbe8 | b0          ; inc xy
  fbe9:0 |  fbe9 | 07 c0 fb fe 98 06 c0 fb ff 98 ; mov [stackPrt], xy
  fbf3:0 |  fbf3 | c0 fa 42 90 38 c0 fa 43 90 30 ; mov xy, [system_trash_var + 4]
  fbfd:0 |  fbfd | aa          ; ret
  fbfe:0 |  fbfe |             ; stackPrt:
  fbfe:0 |  fbfe | fc 00       ; `16
  fc00:0 |  fc00 |             ; Stack:
 10000:0 | 10000 |             ; end:

resolved in 5 iterations
